// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{})
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ordersRowsWithPlaceHolder = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrdersIdPrefix      = "cache:orders:id:"
	cacheOrdersOrderIdPrefix = "cache:orders:orderId:"
	cacheOrdersTradeIdPrefix = "cache:orders:tradeId:"
	cacheOrdersUserIdPrefix  = "cache:orders:userId:"
)

type (
	ordersModel interface {
		Insert(ctx context.Context, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Orders, error)
		FindOneByOrderId(ctx context.Context, orderId uint64) (*Orders, error)
		FindOneByTradeId(ctx context.Context, tradeId string) (*Orders, error)
		FindOneByUserId(ctx context.Context, userId uint64) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOrdersModel struct {
		sqlc.CachedConn
		table string
	}

	Orders struct {
		Id         uint64    `db:"id"`          // 主键
		CreateAt   time.Time `db:"create_at"`   // 创建时间
		CreateBy   string    `db:"create_by"`   // 创建者
		UpdateAt   time.Time `db:"update_at"`   // 更新时间
		UpdateBy   string    `db:"update_by"`   // 更新者
		Version    uint64    `db:"version"`     // 乐观锁版本号
		IsDel      uint64    `db:"is_del"`      // 是否删除：0正常1删除
		UserId     uint64    `db:"user_id"`     // 用户id
		OrderId    uint64    `db:"order_id"`    // 订单id
		TradeId    string    `db:"trade_id"`    // 交易单号
		PayChannel uint64    `db:"pay_channel"` // 支付方式
		Status     uint64    `db:"status"`      // 订单状态:100创建订单/待支付 200已支付 300交易关闭 400完成
		PayAmount  uint64    `db:"pay_amount"`  // 支付金额（分）
		PayTime    time.Time `db:"pay_time"`    // 支付时间
	}
)

func newOrdersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrdersModel {
	return &defaultOrdersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`orders`",
	}
}

func (m *defaultOrdersModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, id)
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, data.OrderId)
	ordersTradeIdKey := fmt.Sprintf("%s%v", cacheOrdersTradeIdPrefix, data.TradeId)
	ordersUserIdKey := fmt.Sprintf("%s%v", cacheOrdersUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ordersIdKey, ordersOrderIdKey, ordersTradeIdKey, ordersUserIdKey)
	return err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, id uint64) (*Orders, error) {
	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, id)
	var resp Orders
	err := m.QueryRowCtx(ctx, &resp, ordersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) FindOneByOrderId(ctx context.Context, orderId uint64) (*Orders, error) {
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, orderId)
	var resp Orders
	err := m.QueryRowIndexCtx(ctx, &resp, ordersOrderIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", ordersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) FindOneByTradeId(ctx context.Context, tradeId string) (*Orders, error) {
	ordersTradeIdKey := fmt.Sprintf("%s%v", cacheOrdersTradeIdPrefix, tradeId)
	var resp Orders
	err := m.QueryRowIndexCtx(ctx, &resp, ordersTradeIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `trade_id` = ? limit 1", ordersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, tradeId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) FindOneByUserId(ctx context.Context, userId uint64) (*Orders, error) {
	ordersUserIdKey := fmt.Sprintf("%s%v", cacheOrdersUserIdPrefix, userId)
	var resp Orders
	err := m.QueryRowIndexCtx(ctx, &resp, ordersUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", ordersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, data *Orders) (sql.Result, error) {
	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, data.Id)
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, data.OrderId)
	ordersTradeIdKey := fmt.Sprintf("%s%v", cacheOrdersTradeIdPrefix, data.TradeId)
	ordersUserIdKey := fmt.Sprintf("%s%v", cacheOrdersUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ordersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreateBy, data.UpdateBy, data.Version, data.IsDel, data.UserId, data.OrderId, data.TradeId, data.PayChannel, data.Status, data.PayAmount, data.PayTime)
	}, ordersIdKey, ordersOrderIdKey, ordersTradeIdKey, ordersUserIdKey)
	return ret, err
}

func (m *defaultOrdersModel) Update(ctx context.Context, newData *Orders) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, data.Id)
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, data.OrderId)
	ordersTradeIdKey := fmt.Sprintf("%s%v", cacheOrdersTradeIdPrefix, data.TradeId)
	ordersUserIdKey := fmt.Sprintf("%s%v", cacheOrdersUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ordersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CreateBy, newData.UpdateBy, newData.Version, newData.IsDel, newData.UserId, newData.OrderId, newData.TradeId, newData.PayChannel, newData.Status, newData.PayAmount, newData.PayTime, newData.Id)
	}, ordersIdKey, ordersOrderIdKey, ordersTradeIdKey, ordersUserIdKey)
	return err
}

func (m *defaultOrdersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrdersIdPrefix, primary)
}

func (m *defaultOrdersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}
